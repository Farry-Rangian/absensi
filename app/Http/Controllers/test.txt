<?php

namespace App\Http\Controllers;

use App\Models\Absensi;
use App\Models\Code;
use App\Models\Kelas;
use App\Models\Materi;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class DashboardController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        $kelas = Kelas::all();
        $materi = Materi::all();

        $absen = Absensi::where('user_id', $user->id)->whereNotNull('start')->whereNull('end')->first();

        return view('admin.dashboard', compact(['kelas', 'materi', 'absen', 'user']));
    }

    public function store(Request $request)
    {
        $user = Auth::user();
        $validatedData = $request->validate([
            'kelas_id' => 'required',
            'materi_id' => 'required',
            'teaching_role' => 'required',
            // 'code' => ['required', 'exists:codes,code', function ($attribute, $value, $fail) use ($user) {
            //     $codeGeneratedByUser = Code::where('code', $value)->where('user_id', $user->id)->exists();

            //     if ($codeGeneratedByUser) {
            //         $fail("You cannot attend using a {$attribute} generated by yourself.");
            //     }
            // }]
            'code' => 'required',
        ]);

        $code = Code::where('code', $validatedData['code'])->first();

        if ($code) {

            if ($code->id_user_get) {
                return redirect('/')->with('error', 'Code has already been used.');
            }

            $code->update([
                'id_user_get' => $user->id,
            ]);

            $validatedData['code_id'] = $code->id;
            $validatedData['user_id'] = $user->id;
            $validatedData['start'] = Carbon::now();
            $validatedData['date'] = Carbon::today();

            Absensi::create($validatedData);
            return redirect('/')->with('success', 'Checkin success');
        } else {
            return redirect('/')->with('error', 'Code not valid');
        }
    }


    public function update(Request $request)
    {
        $absensi_id = $request->input('absensi_id');
        $attendance = Absensi::findOrFail($absensi_id);

        $attendance->update([
            'end' => now(),
            'duration' => now()->diffInMinutes($attendance->start),
        ]);

        return redirect('/')->with('success', 'Check-out successfull');
    }
}
